{"ast":null,"code":"/**\n * LibHaLo - Programmatically interact with HaLo tags from the web browser, mobile application or the desktop.\n * Copyright by Arx Research, Inc., a Delaware corporation\n * License: MIT\n */\n\nconst {\n  HaloTagError,\n  HaloLogicError,\n  NFCOperationError,\n  NFCMethodNotSupported\n} = require(\"../halo/exceptions\");\nconst {\n  ERROR_CODES\n} = require(\"../halo/errors\");\nconst {\n  arr2hex\n} = require(\"../halo/utils\");\nconst FLAG_USE_NEW_MODE = 0x00;\nasync function execCredential(request, options) {\n  if (!window.isSecureContext) {\n    throw new NFCMethodNotSupported(\"This method can be invoked only in the secure context (HTTPS).\");\n  }\n  options = Object.assign({}, options) || {};\n  if (!options.debugCallback) {\n    options.debugCallback = () => null;\n  }\n  if (!options.statusCallback) {\n    options.statusCallback = () => null;\n  }\n  let challenge = new Uint8Array(32);\n  crypto.getRandomValues(challenge);\n  let encodedRequest;\n  if (!options.compatibleCallMode) {\n    encodedRequest = new Uint8Array([FLAG_USE_NEW_MODE, 0x00, ...request]);\n  } else {\n    encodedRequest = new Uint8Array([...request]);\n  }\n  let u2fReq = {\n    \"publicKey\": {\n      \"allowCredentials\": [{\n        \"id\": encodedRequest,\n        \"transports\": ['nfc'],\n        \"type\": \"public-key\"\n      }],\n      \"challenge\": challenge,\n      \"timeout\": 60000,\n      \"userVerification\": \"discouraged\"\n    }\n  };\n  let u2fRes;\n  options.statusCallback(\"init\", \"credential\", \"get-credential\");\n  options.debugCallback(\"get-credential\");\n  try {\n    u2fRes = await navigator.credentials.get(u2fReq);\n  } catch (e) {\n    if (e.name === \"NotSupportedError\") {\n      throw new NFCMethodNotSupported(\"The call threw NotSupportedError. Please update your browser.\");\n    } else {\n      throw new NFCOperationError(\"Failed to execute command. \" + e.name + \": \" + e.message);\n    }\n  }\n  options.statusCallback(\"scanned\", \"credential\", \"get-credential-done\");\n  options.debugCallback(\"get-credential-done\");\n  let res = u2fRes.response.signature;\n  let resBuf = new Uint8Array(res);\n  if (!options.compatibleCallMode) {\n    // the tag will respond with E101 (ERROR_UNKNOWN_CMD) if it doesn't understand new call protocol\n    // which is available only since C5 version\n    if (resBuf.length === 2 && resBuf[0] === 0xE1 && resBuf[1] === 0x01) {\n      throw new HaloLogicError(\"Command failed. The tag doesn't support new call protocol. Please set options.compatibleCallMode = true.\");\n    }\n\n    // 30 <remaining length> 04 00 04 <remaining length> <data ...>\n    if (resBuf[0] !== 0x30 || resBuf[2] !== 0x04) {\n      throw new HaloLogicError(\"Tag's response is not correctly structured.\");\n    }\n    let skipLength = resBuf[3];\n\n    // cut ASN.1 encoding to get pure response\n    resBuf = resBuf.slice(skipLength + 6);\n  }\n  if (resBuf.length === 2 && resBuf[0] === 0xE1) {\n    if (ERROR_CODES.hasOwnProperty(resBuf[1])) {\n      let err = ERROR_CODES[resBuf[1]];\n      throw new HaloTagError(err[0], err[1]);\n    } else {\n      throw new HaloTagError(\"Command returned an unknown error: \" + arr2hex(resBuf));\n    }\n  }\n  return await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({\n        \"result\": arr2hex(resBuf),\n        \"extra\": {}\n      });\n    }, 1);\n  });\n}\nmodule.exports = {\n  execCredential\n};","map":{"version":3,"names":["HaloTagError","HaloLogicError","NFCOperationError","NFCMethodNotSupported","require","ERROR_CODES","arr2hex","FLAG_USE_NEW_MODE","execCredential","request","options","window","isSecureContext","Object","assign","debugCallback","statusCallback","challenge","Uint8Array","crypto","getRandomValues","encodedRequest","compatibleCallMode","u2fReq","u2fRes","navigator","credentials","get","e","name","message","res","response","signature","resBuf","length","skipLength","slice","hasOwnProperty","err","Promise","resolve","reject","setTimeout","module","exports"],"sources":["/Users/user/Desktop/Kardia/libhalo-example-reactjs/node_modules/@arx-research/libhalo/drivers/credential.js"],"sourcesContent":["/**\n * LibHaLo - Programmatically interact with HaLo tags from the web browser, mobile application or the desktop.\n * Copyright by Arx Research, Inc., a Delaware corporation\n * License: MIT\n */\n\nconst {HaloTagError, HaloLogicError, NFCOperationError, NFCMethodNotSupported} = require(\"../halo/exceptions\");\nconst {ERROR_CODES} = require(\"../halo/errors\");\nconst {arr2hex} = require(\"../halo/utils\");\n\nconst FLAG_USE_NEW_MODE = 0x00;\n\nasync function execCredential(request, options) {\n    if (!window.isSecureContext) {\n        throw new NFCMethodNotSupported(\"This method can be invoked only in the secure context (HTTPS).\");\n    }\n\n    options = Object.assign({}, options) || {};\n\n    if (!options.debugCallback) {\n        options.debugCallback = () => null;\n    }\n\n    if (!options.statusCallback) {\n        options.statusCallback = () => null;\n    }\n\n    let challenge = new Uint8Array(32);\n    crypto.getRandomValues(challenge);\n\n    let encodedRequest;\n\n    if (!options.compatibleCallMode) {\n        encodedRequest = new Uint8Array([FLAG_USE_NEW_MODE, 0x00, ...request]);\n    } else {\n        encodedRequest = new Uint8Array([...request]);\n    }\n\n    let u2fReq = {\n        \"publicKey\": {\n            \"allowCredentials\": [\n                {\n                    \"id\": encodedRequest,\n                    \"transports\": ['nfc'],\n                    \"type\": \"public-key\"\n                }\n            ],\n            \"challenge\": challenge,\n            \"timeout\": 60000,\n            \"userVerification\": \"discouraged\"\n        }\n    };\n\n    let u2fRes;\n\n    options.statusCallback(\"init\", \"credential\", \"get-credential\");\n    options.debugCallback(\"get-credential\");\n\n    try {\n        u2fRes = await navigator.credentials.get(u2fReq);\n    } catch (e) {\n        if (e.name === \"NotSupportedError\") {\n            throw new NFCMethodNotSupported(\"The call threw NotSupportedError. Please update your browser.\");\n        } else {\n            throw new NFCOperationError(\"Failed to execute command. \" + e.name + \": \" + e.message);\n        }\n    }\n\n    options.statusCallback(\"scanned\", \"credential\", \"get-credential-done\");\n    options.debugCallback(\"get-credential-done\");\n\n    let res = u2fRes.response.signature;\n    let resBuf = new Uint8Array(res);\n\n    if (!options.compatibleCallMode) {\n        // the tag will respond with E101 (ERROR_UNKNOWN_CMD) if it doesn't understand new call protocol\n        // which is available only since C5 version\n        if (resBuf.length === 2 && resBuf[0] === 0xE1 && resBuf[1] === 0x01) {\n            throw new HaloLogicError(\"Command failed. The tag doesn't support new call protocol. Please set options.compatibleCallMode = true.\");\n        }\n\n        // 30 <remaining length> 04 00 04 <remaining length> <data ...>\n        if (resBuf[0] !== 0x30 || resBuf[2] !== 0x04) {\n            throw new HaloLogicError(\"Tag's response is not correctly structured.\");\n        }\n\n        let skipLength = resBuf[3];\n\n        // cut ASN.1 encoding to get pure response\n        resBuf = resBuf.slice(skipLength + 6);\n    }\n\n    if (resBuf.length === 2 && resBuf[0] === 0xE1) {\n        if (ERROR_CODES.hasOwnProperty(resBuf[1])) {\n            let err = ERROR_CODES[resBuf[1]];\n            throw new HaloTagError(err[0], err[1]);\n        } else {\n            throw new HaloTagError(\"Command returned an unknown error: \" + arr2hex(resBuf));\n        }\n    }\n\n    return await new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve({\n                \"result\": arr2hex(resBuf),\n                \"extra\": {}\n            });\n        }, 1);\n    });\n}\n\nmodule.exports = {\n    execCredential\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}