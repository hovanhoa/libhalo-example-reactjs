{"ast":null,"code":"const {\n  JWEUtil\n} = require(\"../jwe_util\");\nconst queryString = require(\"query-string\");\nconst WebSocketAsPromised = require(\"websocket-as-promised\");\nlet currentCmd = null;\nlet jweUtil = new JWEUtil();\nlet wsp;\nfunction createWs(url) {\n  return new WebSocketAsPromised(url, {\n    packMessage: data => JSON.stringify(data),\n    unpackMessage: data => JSON.parse(data),\n    attachRequestId: (data, requestId) => Object.assign({\n      uid: requestId\n    }, data),\n    extractRequestId: data => data && data.uid\n  });\n}\nasync function haloGateExecutorCreateWs(logCallback, newCommandCallback) {\n  let protocol;\n  let searchParts = window.location.hash.split('/');\n  if (searchParts.length !== 3 || searchParts[0] !== \"#!\" || searchParts[2] !== \"\") {\n    throw new Error(\"Malformed executor URL provided - failed to analyse fragment part.\");\n  }\n  await jweUtil.loadKey(searchParts[1]);\n  const qs = queryString.parse(window.location.search);\n  if (!qs.id) {\n    throw new Error(\"Malformed executor URL provided - failed to analyse query part.\");\n  }\n  const sessionId = qs.id;\n  if (window.location.protocol === 'https:') {\n    protocol = 'wss://';\n  } else {\n    protocol = 'ws://';\n  }\n  wsp = createWs(protocol + window.location.host + '/ws?side=executor&sessionId=' + sessionId);\n  wsp.onUnpackedMessage.addListener(async ev => {\n    if (ev.type === \"ping\") {\n      logCallback(\"Received welcome from server. Waiting for command to be requested.\");\n    } else if (ev.type === \"requested_cmd\") {\n      let payload;\n      try {\n        payload = await jweUtil.decrypt(ev.payload);\n      } catch (e) {\n        logCallback(\"Failed to validate or decrypt the command packet.\");\n        return;\n      }\n      currentCmd = payload;\n      newCommandCallback(payload.command);\n    } else {\n      logCallback(\"Unknown packet:\\n\" + JSON.stringify(ev));\n    }\n  });\n  wsp.onClose.addListener(event => {\n    logCallback('Connection closed. [' + event.code + '] ' + event.reason);\n  });\n  await wsp.open();\n}\nasync function haloGateExecutorUserConfirm(logCallback) {\n  let res;\n  let nonce = currentCmd.nonce;\n  logCallback('Please tap HaLo tag to the back of your smartphone and hold it for a while...');\n  try {\n    res = await execHaloCmdWeb(currentCmd.command);\n  } catch (e) {\n    throw e;\n  }\n  logCallback('Command executed, sending result over the network...');\n  currentCmd = null;\n  wsp.sendPacked({\n    \"type\": \"executed_cmd\",\n    \"payload\": await jweUtil.encrypt({\n      response: res,\n      nonce: nonce\n    })\n  });\n}\nmodule.exports = {\n  haloGateExecutorCreateWs,\n  haloGateExecutorUserConfirm\n};","map":{"version":3,"names":["JWEUtil","require","queryString","WebSocketAsPromised","currentCmd","jweUtil","wsp","createWs","url","packMessage","data","JSON","stringify","unpackMessage","parse","attachRequestId","requestId","Object","assign","uid","extractRequestId","haloGateExecutorCreateWs","logCallback","newCommandCallback","protocol","searchParts","window","location","hash","split","length","Error","loadKey","qs","search","id","sessionId","host","onUnpackedMessage","addListener","ev","type","payload","decrypt","e","command","onClose","event","code","reason","open","haloGateExecutorUserConfirm","res","nonce","execHaloCmdWeb","sendPacked","encrypt","response","module","exports"],"sources":["/Users/user/Desktop/Kardia/libhalo-example-reactjs/node_modules/@arx-research/libhalo/halo/gateway/executor.js"],"sourcesContent":["const {JWEUtil} = require(\"../jwe_util\");\nconst queryString = require(\"query-string\");\nconst WebSocketAsPromised = require(\"websocket-as-promised\");\n\nlet currentCmd = null;\nlet jweUtil = new JWEUtil();\nlet wsp;\n\nfunction createWs(url) {\n    return new WebSocketAsPromised(url, {\n        packMessage: data => JSON.stringify(data),\n        unpackMessage: data => JSON.parse(data),\n        attachRequestId: (data, requestId) => Object.assign({uid: requestId}, data),\n        extractRequestId: data => data && data.uid\n    });\n}\n\nasync function haloGateExecutorCreateWs(logCallback, newCommandCallback) {\n    let protocol;\n    let searchParts = window.location.hash.split('/');\n\n    if (searchParts.length !== 3 || searchParts[0] !== \"#!\" || searchParts[2] !== \"\") {\n        throw new Error(\"Malformed executor URL provided - failed to analyse fragment part.\");\n    }\n\n    await jweUtil.loadKey(searchParts[1]);\n\n    const qs = queryString.parse(window.location.search);\n\n    if (!qs.id) {\n        throw new Error(\"Malformed executor URL provided - failed to analyse query part.\");\n    }\n\n    const sessionId = qs.id;\n\n    if (window.location.protocol === 'https:') {\n        protocol = 'wss://';\n    } else {\n        protocol = 'ws://';\n    }\n\n    wsp = createWs(protocol + window.location.host + '/ws?side=executor&sessionId=' + sessionId);\n\n    wsp.onUnpackedMessage.addListener(async ev => {\n        if (ev.type === \"ping\") {\n            logCallback(\"Received welcome from server. Waiting for command to be requested.\");\n        } else if (ev.type === \"requested_cmd\") {\n            let payload;\n\n            try {\n                payload = await jweUtil.decrypt(ev.payload);\n            } catch (e) {\n                logCallback(\"Failed to validate or decrypt the command packet.\");\n                return;\n            }\n\n            currentCmd = payload;\n            newCommandCallback(payload.command);\n        } else {\n            logCallback(\"Unknown packet:\\n\" + JSON.stringify(ev));\n        }\n    });\n\n    wsp.onClose.addListener(event => {\n        logCallback('Connection closed. [' + event.code + '] ' + event.reason);\n    });\n\n    await wsp.open();\n}\n\nasync function haloGateExecutorUserConfirm(logCallback) {\n    let res;\n    let nonce = currentCmd.nonce;\n\n    logCallback('Please tap HaLo tag to the back of your smartphone and hold it for a while...');\n\n    try {\n        res = await execHaloCmdWeb(currentCmd.command);\n    } catch (e) {\n        throw e;\n    }\n\n    logCallback('Command executed, sending result over the network...');\n\n    currentCmd = null;\n    wsp.sendPacked({\n        \"type\": \"executed_cmd\",\n        \"payload\": await jweUtil.encrypt({\n            response: res,\n            nonce: nonce\n        })\n    });\n}\n\nmodule.exports = {\n    haloGateExecutorCreateWs,\n    haloGateExecutorUserConfirm\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}