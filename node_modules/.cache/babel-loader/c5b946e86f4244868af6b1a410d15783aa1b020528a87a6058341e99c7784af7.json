{"ast":null,"code":"const QRCode = require(\"qrcode\");\nconst WebSocketAsPromised = require(\"websocket-as-promised\");\nconst crypto = require(\"crypto\");\nconst {\n  JWEUtil\n} = require(\"../jwe_util\");\nfunction makeQR(url) {\n  return new Promise((resolve, reject) => {\n    QRCode.toDataURL(url, function (err, url) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(url);\n      }\n    });\n  });\n}\nclass HaloGateway {\n  constructor(gatewayServer) {\n    this.jweUtil = new JWEUtil();\n    this.isRunning = false;\n    this.lastCommand = null;\n    this.gatewayServer = gatewayServer;\n    let urlObj = new URL(gatewayServer);\n    if (urlObj.protocol === 'wss:') {\n      urlObj.protocol = 'https:';\n    } else if (urlObj.protocol === 'ws:') {\n      urlObj.protocol = 'http:';\n    } else {\n      throw new Error(\"Unexpected protocol provided, expected ws:// or wss:// only.\");\n    }\n    if (!urlObj.pathname.endsWith('/')) {\n      urlObj.pathname += '/';\n    }\n    urlObj.pathname += 'e';\n    this.gatewayServerHttp = urlObj.toString();\n    this.ws = new WebSocketAsPromised(this.gatewayServer + '/ws?side=requestor', {\n      packMessage: data => JSON.stringify(data),\n      unpackMessage: data => JSON.parse(data),\n      attachRequestId: (data, requestId) => Object.assign({\n        uid: requestId\n      }, data),\n      extractRequestId: data => data && data.uid\n    });\n    this.ws.onSend.addListener(data => {\n      let obj = JSON.parse(data);\n      if (obj.type === \"request_cmd\") {\n        this.lastCommand = obj;\n      }\n    });\n    this.ws.onUnpackedMessage.addListener(data => {\n      if (data.type === \"executor_connected\" && this.lastCommand) {\n        // existing executor connection was replaced, repeat last command\n        this.ws.sendPacked(this.lastCommand);\n      }\n    });\n  }\n  waitForWelcomePacket() {\n    return new Promise((resolve, reject) => {\n      let welcomeWaitTimeout = setTimeout(() => {\n        reject(new Error(\"Server doesn't send welcome packet for 6 seconds after accepting the connection.\"));\n      }, 6000);\n      this.ws.onClose.addListener(event => {\n        reject(new Error(\"WebSocket closed when waiting for welcome packet. Reason: [\" + event.code + \"] \" + event.reason));\n      });\n      this.ws.onUnpackedMessage.addListener(data => {\n        if (data.type === \"welcome\") {\n          clearTimeout(welcomeWaitTimeout);\n          resolve(data);\n        }\n      });\n    });\n  }\n  async startPairing() {\n    let sharedKey = await this.jweUtil.generateKey();\n    let waitPromise = this.waitForWelcomePacket();\n    await this.ws.open();\n    let welcomeMsg = await waitPromise;\n\n    /**\n     * URL format in the QR Code:\n     * <gateway server origin>/e?id=<session id>#!/<encryption key>/\n     *\n     * where:\n     * * gateway server origin - public HTTP(S) address to the gateway server\n     * * session id - unique identifier generated by the server, used to match requestor and executor\n     * * encryption key - end-to-end encryption key, passed only on client side, the gateway server doesn't see it\n     *\n     * note that the communication between requestor (e.g. PC) and executor (e.g. smartphone) is carried out\n     * in the form of JWE tokens encrypted with AES-128 shared key, the shared key is passed only on the\n     * client side so the gateway server doesn't \"see\" neither commands nor responses\n     *\n     * example:\n     * https://dev-gate.example.com/e?id=-l6QxdU3xLyDTR2oT7bjnw#!/3LKNuIJV0Ltp0dhNw09tCQ/\n     */\n    let execURL = this.gatewayServerHttp + '?id=' + welcomeMsg.sessionId + '#!/' + sharedKey + '/';\n    let qrCode = await makeQR(execURL);\n    return {\n      execURL: execURL,\n      qrCode: qrCode\n    };\n  }\n  waitConnected() {\n    return new Promise((resolve, reject) => {\n      this.ws.onClose.addListener(event => {\n        reject(new Error(\"WebSocket closed when waiting for executor to connect. Reason: [\" + event.code + \"] \" + event.reason));\n      });\n      this.ws.onUnpackedMessage.addListener(data => {\n        if (data.type === \"executor_connected\") {\n          resolve(data);\n        }\n      });\n    });\n  }\n  async execHaloCmd(command) {\n    if (this.isRunning) {\n      throw new Error(\"Can not make multiple calls to execHaloCmd() in parallel.\");\n    }\n    this.isRunning = true;\n    let nonce = crypto.randomBytes(8).toString('hex');\n    try {\n      let res = await this.ws.sendRequest({\n        \"type\": \"request_cmd\",\n        \"payload\": await this.jweUtil.encrypt({\n          nonce,\n          command\n        })\n      });\n      if (res.type !== \"result_cmd\") {\n        throw new Error(\"Unexpected packet type.\");\n      }\n      this.lastCommand = null;\n      let out;\n      try {\n        out = await this.jweUtil.decrypt(res.payload);\n      } catch (e) {\n        throw new Error(\"Failed to validate or decrypt response packet.\");\n      }\n      if (out.nonce !== nonce) {\n        throw new Error(\"Mismatched nonce in reply.\");\n      }\n      return out.response;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n}\nmodule.exports = {\n  HaloGateway\n};","map":{"version":3,"names":["QRCode","require","WebSocketAsPromised","crypto","JWEUtil","makeQR","url","Promise","resolve","reject","toDataURL","err","HaloGateway","constructor","gatewayServer","jweUtil","isRunning","lastCommand","urlObj","URL","protocol","Error","pathname","endsWith","gatewayServerHttp","toString","ws","packMessage","data","JSON","stringify","unpackMessage","parse","attachRequestId","requestId","Object","assign","uid","extractRequestId","onSend","addListener","obj","type","onUnpackedMessage","sendPacked","waitForWelcomePacket","welcomeWaitTimeout","setTimeout","onClose","event","code","reason","clearTimeout","startPairing","sharedKey","generateKey","waitPromise","open","welcomeMsg","execURL","sessionId","qrCode","waitConnected","execHaloCmd","command","nonce","randomBytes","res","sendRequest","encrypt","out","decrypt","payload","e","response","module","exports"],"sources":["/Users/user/Desktop/Kardia/libhalo-example-reactjs/node_modules/@arx-research/libhalo/halo/gateway/requestor.js"],"sourcesContent":["const QRCode = require(\"qrcode\");\nconst WebSocketAsPromised = require(\"websocket-as-promised\");\nconst crypto = require(\"crypto\");\nconst {JWEUtil} = require(\"../jwe_util\");\n\nfunction makeQR(url) {\n    return new Promise((resolve, reject) => {\n        QRCode.toDataURL(url, function (err, url) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(url);\n            }\n        });\n    });\n}\n\nclass HaloGateway {\n    constructor(gatewayServer) {\n        this.jweUtil = new JWEUtil();\n        this.isRunning = false;\n\n        this.lastCommand = null;\n        this.gatewayServer = gatewayServer;\n\n        let urlObj = new URL(gatewayServer);\n\n        if (urlObj.protocol === 'wss:') {\n            urlObj.protocol = 'https:';\n        } else if (urlObj.protocol === 'ws:') {\n            urlObj.protocol = 'http:';\n        } else {\n            throw new Error(\"Unexpected protocol provided, expected ws:// or wss:// only.\");\n        }\n\n        if (!urlObj.pathname.endsWith('/')) {\n            urlObj.pathname += '/';\n        }\n\n        urlObj.pathname += 'e';\n\n        this.gatewayServerHttp = urlObj.toString();\n\n        this.ws = new WebSocketAsPromised(this.gatewayServer + '/ws?side=requestor', {\n            packMessage: data => JSON.stringify(data),\n            unpackMessage: data => JSON.parse(data),\n            attachRequestId: (data, requestId) => Object.assign({uid: requestId}, data),\n            extractRequestId: data => data && data.uid\n        });\n\n        this.ws.onSend.addListener(data => {\n            let obj = JSON.parse(data);\n\n            if (obj.type === \"request_cmd\") {\n                this.lastCommand = obj;\n            }\n        });\n\n        this.ws.onUnpackedMessage.addListener(data => {\n            if (data.type === \"executor_connected\" && this.lastCommand) {\n                // existing executor connection was replaced, repeat last command\n                this.ws.sendPacked(this.lastCommand);\n            }\n        });\n    }\n\n    waitForWelcomePacket() {\n        return new Promise((resolve, reject) => {\n            let welcomeWaitTimeout = setTimeout(() => {\n                reject(new Error(\"Server doesn't send welcome packet for 6 seconds after accepting the connection.\"));\n            }, 6000);\n\n            this.ws.onClose.addListener((event) => {\n                reject(new Error(\"WebSocket closed when waiting for welcome packet. Reason: [\" + event.code + \"] \" + event.reason));\n            });\n\n            this.ws.onUnpackedMessage.addListener(data => {\n                if (data.type === \"welcome\") {\n                    clearTimeout(welcomeWaitTimeout);\n                    resolve(data);\n                }\n            });\n        })\n    }\n\n    async startPairing() {\n        let sharedKey = await this.jweUtil.generateKey();\n\n        let waitPromise = this.waitForWelcomePacket();\n        await this.ws.open();\n        let welcomeMsg = await waitPromise;\n\n        /**\n         * URL format in the QR Code:\n         * <gateway server origin>/e?id=<session id>#!/<encryption key>/\n         *\n         * where:\n         * * gateway server origin - public HTTP(S) address to the gateway server\n         * * session id - unique identifier generated by the server, used to match requestor and executor\n         * * encryption key - end-to-end encryption key, passed only on client side, the gateway server doesn't see it\n         *\n         * note that the communication between requestor (e.g. PC) and executor (e.g. smartphone) is carried out\n         * in the form of JWE tokens encrypted with AES-128 shared key, the shared key is passed only on the\n         * client side so the gateway server doesn't \"see\" neither commands nor responses\n         *\n         * example:\n         * https://dev-gate.example.com/e?id=-l6QxdU3xLyDTR2oT7bjnw#!/3LKNuIJV0Ltp0dhNw09tCQ/\n         */\n        let execURL = this.gatewayServerHttp + '?id=' + welcomeMsg.sessionId + '#!/' + sharedKey + '/';\n        let qrCode = await makeQR(execURL);\n\n        return {\n            execURL: execURL,\n            qrCode: qrCode\n        };\n    }\n\n    waitConnected() {\n        return new Promise((resolve, reject) => {\n            this.ws.onClose.addListener((event) => {\n                reject(new Error(\"WebSocket closed when waiting for executor to connect. Reason: [\" + event.code + \"] \" + event.reason));\n            });\n\n            this.ws.onUnpackedMessage.addListener(data => {\n                if (data.type === \"executor_connected\") {\n                    resolve(data);\n                }\n            });\n        })\n    }\n\n    async execHaloCmd(command) {\n        if (this.isRunning) {\n            throw new Error(\"Can not make multiple calls to execHaloCmd() in parallel.\");\n        }\n\n        this.isRunning = true;\n        let nonce = crypto.randomBytes(8).toString('hex');\n\n        try {\n            let res = await this.ws.sendRequest({\n                \"type\": \"request_cmd\",\n                \"payload\": await this.jweUtil.encrypt({\n                    nonce,\n                    command\n                })\n            });\n\n            if (res.type !== \"result_cmd\") {\n                throw new Error(\"Unexpected packet type.\");\n            }\n\n            this.lastCommand = null;\n            let out;\n\n            try {\n                out = await this.jweUtil.decrypt(res.payload);\n            } catch (e) {\n                throw new Error(\"Failed to validate or decrypt response packet.\");\n            }\n\n            if (out.nonce !== nonce) {\n                throw new Error(\"Mismatched nonce in reply.\");\n            }\n\n            return out.response;\n        } finally {\n            this.isRunning = false;\n        }\n    }\n}\n\nmodule.exports = {\n    HaloGateway\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}