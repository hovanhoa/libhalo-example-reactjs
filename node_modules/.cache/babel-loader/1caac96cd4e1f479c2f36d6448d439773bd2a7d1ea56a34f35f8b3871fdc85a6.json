{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/Kardia/libhalo-example-reactjs/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { execHaloCmdWeb } from \"./libhalo/api/web.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [statusText, setStatusText] = useState('Click on the button 5');\n  async function btnClick() {\n    // let command = {\n    //     name: \"sign\",\n    //     keyNo: 1,\n    //     message: \"010203\",\n    //     /* uncomment the line below if you get an error about setting \"command.legacySignCommand = true\" */\n    //     legacySignCommand: true,\n    // };\n\n    // let command = {\n    //     \"name\": \"gen_key\",\n    //     \"keyNo\": 3,\n    //     \"entropy\": \"3c825af7d2e1b02b6a00c257ebe883260b4aa6302c9878d412046d10141b261d\"\n    // };\n\n    // Get public key\n    const KEY_NO = 1;\n    console.log(\"START\");\n    let pkeysRes = await execHaloCmdWeb({\n      \"name\": \"get_pkeys\"\n    });\n    let publicKey = pkeysRes.publicKeys[KEY_NO];\n    console.log('publicKey', publicKey);\n    console.log('publicKey 0', pkeysRes.publicKeys[0]);\n    console.log('publicKey 1', pkeysRes.publicKeys[1]);\n    console.log(\"END\");\n\n    // let res;\n    setStatusText(\"Init\");\n\n    // try {\n    //     // --- request NFC command execution ---\n    //     res = await execHaloCmdWeb(command, {\n    //         statusCallback: (cause) => {\n    //             if (cause === \"init\") {\n    //                 setStatusText(\"Please tap the tag to the back of your smartphone and hold it...\");\n    //             } else if (cause === \"retry\") {\n    //                 setStatusText(\"Something went wrong, please try to tap the tag again...\");\n    //             } else if (cause === \"scanned\") {\n    //                 setStatusText(\"Tag scanned successfully, post-processing the result...\");\n    //             } else {\n    //                 setStatusText(cause);\n    //             }\n    //         }\n    //     });\n    //     // the command has succeeded, display the result to the user\n    //     setStatusText(JSON.stringify(res, null, 4));\n    // } catch (e) {\n    //     // the command has failed, display error to the user\n    //     setStatusText('Scanning failed, click on the button again to retry. Details: ' + String(e));\n    // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        fontSize: 12,\n        textAlign: \"left\",\n        whiteSpace: \"pre-wrap\",\n        wordWrap: \"break-word\"\n      },\n      children: statusText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => btnClick(),\n      children: \"Sign message 010203 using key #1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"FdE22qqr+oirhQRx+42/OZ8Z4KA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","execHaloCmdWeb","jsxDEV","_jsxDEV","App","_s","statusText","setStatusText","btnClick","KEY_NO","console","log","pkeysRes","publicKey","publicKeys","className","children","style","fontSize","textAlign","whiteSpace","wordWrap","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/Kardia/libhalo-example-reactjs/src/App.js"],"sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {execHaloCmdWeb} from \"./libhalo/api/web.js\";\n\nfunction App() {\n    const [statusText, setStatusText] = useState('Click on the button 5');\n\n    async function btnClick() {\n        // let command = {\n        //     name: \"sign\",\n        //     keyNo: 1,\n        //     message: \"010203\",\n        //     /* uncomment the line below if you get an error about setting \"command.legacySignCommand = true\" */\n        //     legacySignCommand: true,\n        // };\n\n        // let command = {\n        //     \"name\": \"gen_key\",\n        //     \"keyNo\": 3,\n        //     \"entropy\": \"3c825af7d2e1b02b6a00c257ebe883260b4aa6302c9878d412046d10141b261d\"\n        // };\n\n        // Get public key\n        const KEY_NO = 1;\n        console.log(\"START\")\n        let pkeysRes = await execHaloCmdWeb({\"name\": \"get_pkeys\"});\n        let publicKey = pkeysRes.publicKeys[KEY_NO];\n        console.log('publicKey', publicKey);\n        console.log('publicKey 0', pkeysRes.publicKeys[0]);\n        console.log('publicKey 1', pkeysRes.publicKeys[1]);\n        console.log(\"END\")\n\n        // let res;\n        setStatusText(\"Init\")\n\n        // try {\n        //     // --- request NFC command execution ---\n        //     res = await execHaloCmdWeb(command, {\n        //         statusCallback: (cause) => {\n        //             if (cause === \"init\") {\n        //                 setStatusText(\"Please tap the tag to the back of your smartphone and hold it...\");\n        //             } else if (cause === \"retry\") {\n        //                 setStatusText(\"Something went wrong, please try to tap the tag again...\");\n        //             } else if (cause === \"scanned\") {\n        //                 setStatusText(\"Tag scanned successfully, post-processing the result...\");\n        //             } else {\n        //                 setStatusText(cause);\n        //             }\n        //         }\n        //     });\n        //     // the command has succeeded, display the result to the user\n        //     setStatusText(JSON.stringify(res, null, 4));\n        // } catch (e) {\n        //     // the command has failed, display error to the user\n        //     setStatusText('Scanning failed, click on the button again to retry. Details: ' + String(e));\n        // }\n    }\n\n    return (\n        <div className=\"App\">\n            <pre style={{fontSize: 12, textAlign: \"left\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\"}}>\n                {statusText}\n            </pre>\n            <button onClick={() => btnClick()}>Sign message 010203 using key #1</button>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,WAAW;AAClB,SAAQC,cAAc,QAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,uBAAuB,CAAC;EAErE,eAAeQ,QAAQA,CAAA,EAAG;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMC,MAAM,GAAG,CAAC;IAChBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,IAAIC,QAAQ,GAAG,MAAMX,cAAc,CAAC;MAAC,MAAM,EAAE;IAAW,CAAC,CAAC;IAC1D,IAAIY,SAAS,GAAGD,QAAQ,CAACE,UAAU,CAACL,MAAM,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEE,SAAS,CAAC;IACnCH,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,QAAQ,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC;IAClDJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,QAAQ,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC;IAClDJ,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;;IAElB;IACAJ,aAAa,CAAC,MAAM,CAAC;;IAErB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;EAEA,oBACIJ,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBb,OAAA;MAAKc,KAAK,EAAE;QAACC,QAAQ,EAAE,EAAE;QAAEC,SAAS,EAAE,MAAM;QAAEC,UAAU,EAAE,UAAU;QAAEC,QAAQ,EAAE;MAAY,CAAE;MAAAL,QAAA,EACzFV;IAAU;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACNtB,OAAA;MAAQuB,OAAO,EAAEA,CAAA,KAAMlB,QAAQ,CAAC,CAAE;MAAAQ,QAAA,EAAC;IAAgC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEd;AAACpB,EAAA,CA9DQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAgEZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}