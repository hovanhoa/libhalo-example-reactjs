{"ast":null,"code":"/**\n * Class for manage pending requests.\n * @private\n */\n\nconst PromiseController = require('promise-controller');\nconst promiseFinally = require('promise.prototype.finally');\nmodule.exports = class Requests {\n  constructor() {\n    this._items = new Map();\n  }\n\n  /**\n   * Creates new request and stores it in the list.\n   *\n   * @param {String|Number} requestId\n   * @param {Function} fn\n   * @param {Number} timeout\n   * @returns {Promise}\n   */\n  create(requestId, fn, timeout) {\n    this._rejectExistingRequest(requestId);\n    return this._createNewRequest(requestId, fn, timeout);\n  }\n  resolve(requestId, data) {\n    if (requestId && this._items.has(requestId)) {\n      this._items.get(requestId).resolve(data);\n    }\n  }\n  rejectAll(error) {\n    this._items.forEach(request => request.isPending ? request.reject(error) : null);\n  }\n  _rejectExistingRequest(requestId) {\n    const existingRequest = this._items.get(requestId);\n    if (existingRequest && existingRequest.isPending) {\n      existingRequest.reject(new Error(`WebSocket request is replaced, id: ${requestId}`));\n    }\n  }\n  _createNewRequest(requestId, fn, timeout) {\n    const request = new PromiseController({\n      timeout,\n      timeoutReason: `WebSocket request was rejected by timeout (${timeout} ms). RequestId: ${requestId}`\n    });\n    this._items.set(requestId, request);\n    return promiseFinally(request.call(fn), () => this._deleteRequest(requestId, request));\n  }\n  _deleteRequest(requestId, request) {\n    // this check is important when request was replaced\n    if (this._items.get(requestId) === request) {\n      this._items.delete(requestId);\n    }\n  }\n};","map":{"version":3,"names":["PromiseController","require","promiseFinally","module","exports","Requests","constructor","_items","Map","create","requestId","fn","timeout","_rejectExistingRequest","_createNewRequest","resolve","data","has","get","rejectAll","error","forEach","request","isPending","reject","existingRequest","Error","timeoutReason","set","call","_deleteRequest","delete"],"sources":["/Users/user/Desktop/Kardia/libhalo-example-reactjs/node_modules/websocket-as-promised/src/requests.js"],"sourcesContent":["/**\n * Class for manage pending requests.\n * @private\n */\n\nconst PromiseController = require('promise-controller');\nconst promiseFinally = require('promise.prototype.finally');\n\nmodule.exports = class Requests {\n  constructor() {\n    this._items = new Map();\n  }\n\n  /**\n   * Creates new request and stores it in the list.\n   *\n   * @param {String|Number} requestId\n   * @param {Function} fn\n   * @param {Number} timeout\n   * @returns {Promise}\n   */\n  create(requestId, fn, timeout) {\n    this._rejectExistingRequest(requestId);\n    return this._createNewRequest(requestId, fn, timeout);\n  }\n\n  resolve(requestId, data) {\n    if (requestId && this._items.has(requestId)) {\n      this._items.get(requestId).resolve(data);\n    }\n  }\n\n  rejectAll(error) {\n    this._items.forEach(request => request.isPending ? request.reject(error) : null);\n  }\n\n  _rejectExistingRequest(requestId) {\n    const existingRequest = this._items.get(requestId);\n    if (existingRequest && existingRequest.isPending) {\n      existingRequest.reject(new Error(`WebSocket request is replaced, id: ${requestId}`));\n    }\n  }\n\n  _createNewRequest(requestId, fn, timeout) {\n    const request = new PromiseController({\n      timeout,\n      timeoutReason: `WebSocket request was rejected by timeout (${timeout} ms). RequestId: ${requestId}`\n    });\n    this._items.set(requestId, request);\n    return promiseFinally(request.call(fn), () => this._deleteRequest(requestId, request));\n  }\n\n  _deleteRequest(requestId, request) {\n    // this check is important when request was replaced\n    if (this._items.get(requestId) === request) {\n      this._items.delete(requestId);\n    }\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACvD,MAAMC,cAAc,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AAE3DE,MAAM,CAACC,OAAO,GAAG,MAAMC,QAAQ,CAAC;EAC9BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,SAAS,EAAEC,EAAE,EAAEC,OAAO,EAAE;IAC7B,IAAI,CAACC,sBAAsB,CAACH,SAAS,CAAC;IACtC,OAAO,IAAI,CAACI,iBAAiB,CAACJ,SAAS,EAAEC,EAAE,EAAEC,OAAO,CAAC;EACvD;EAEAG,OAAOA,CAACL,SAAS,EAAEM,IAAI,EAAE;IACvB,IAAIN,SAAS,IAAI,IAAI,CAACH,MAAM,CAACU,GAAG,CAACP,SAAS,CAAC,EAAE;MAC3C,IAAI,CAACH,MAAM,CAACW,GAAG,CAACR,SAAS,CAAC,CAACK,OAAO,CAACC,IAAI,CAAC;IAC1C;EACF;EAEAG,SAASA,CAACC,KAAK,EAAE;IACf,IAAI,CAACb,MAAM,CAACc,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACE,MAAM,CAACJ,KAAK,CAAC,GAAG,IAAI,CAAC;EAClF;EAEAP,sBAAsBA,CAACH,SAAS,EAAE;IAChC,MAAMe,eAAe,GAAG,IAAI,CAAClB,MAAM,CAACW,GAAG,CAACR,SAAS,CAAC;IAClD,IAAIe,eAAe,IAAIA,eAAe,CAACF,SAAS,EAAE;MAChDE,eAAe,CAACD,MAAM,CAAC,IAAIE,KAAK,CAAE,sCAAqChB,SAAU,EAAC,CAAC,CAAC;IACtF;EACF;EAEAI,iBAAiBA,CAACJ,SAAS,EAAEC,EAAE,EAAEC,OAAO,EAAE;IACxC,MAAMU,OAAO,GAAG,IAAItB,iBAAiB,CAAC;MACpCY,OAAO;MACPe,aAAa,EAAG,8CAA6Cf,OAAQ,oBAAmBF,SAAU;IACpG,CAAC,CAAC;IACF,IAAI,CAACH,MAAM,CAACqB,GAAG,CAAClB,SAAS,EAAEY,OAAO,CAAC;IACnC,OAAOpB,cAAc,CAACoB,OAAO,CAACO,IAAI,CAAClB,EAAE,CAAC,EAAE,MAAM,IAAI,CAACmB,cAAc,CAACpB,SAAS,EAAEY,OAAO,CAAC,CAAC;EACxF;EAEAQ,cAAcA,CAACpB,SAAS,EAAEY,OAAO,EAAE;IACjC;IACA,IAAI,IAAI,CAACf,MAAM,CAACW,GAAG,CAACR,SAAS,CAAC,KAAKY,OAAO,EAAE;MAC1C,IAAI,CAACf,MAAM,CAACwB,MAAM,CAACrB,SAAS,CAAC;IAC/B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}